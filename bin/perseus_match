#! /usr/bin/ruby

require 'optparse'
require 'benchmark'
require 'yaml'
require 'set'

require 'rubygems'
require 'nuggets/enumerable/minmax'
require 'nuggets/numeric/duration'
require 'nuggets/string/evaluate'

$: << File.join(File.dirname(__FILE__), '..', 'lib')

require 'perseus_match'

USAGE = "Usage: #{$0} [-h|--help] [options] <file>"
abort USAGE if ARGV.empty?

options = {
  :config       => nil,
  :threshold    => 0,
  :sort         => false,
  :stats        => false,
  :silent       => false,
  :unknowns     => nil,
  :minimal      => false,
  :separate     => false,
  :lingo        => false,
  :format       => nil,
  :check        => false,
  :failed_only  => false,
  :align        => false,
  :adjust_coeff => false
}

OptionParser.new { |opts|
  opts.banner = USAGE

  opts.separator ' '
  opts.separator 'Options:'

  opts.on('-c', '--config YAML', 'Config file in YAML format') { |f|
    abort "Can't find config file: #{f}." unless File.readable?(f)

    options[:config] = f
  }

  opts.on('-t', '--threshold NUM', Float, "Similarity threshold [Default: #{options[:threshold]}]") { |t|
    options[:threshold] = t
  }

  opts.on('-s', '--sort', 'Sort results (considerably slower!)') {
    options[:sort] = true
  }

  opts.on('-S', '--stats', 'Output some statistics at the end') {
    options[:stats] = true
  }

  opts.on('-v', '--verbose', 'Print additional information during processing') {
    options[:verbose] = true
  }

  opts.on('-n', '--silent', 'Suppress warnings') {
    options[:silent] = true
  }

  opts.on('-u', '--unknowns FILE', 'Write unknown tokens as lingo dictionary to FILE') { |f|
    options[:unknowns] = f
  }

  opts.separator ' '
  opts.separator '  * Calculating similarities (default)'
  opts.separator ' '

  opts.on('-m', '--minimal', 'Produce minimal pairs only') {
    options[:minimal] = true
  }

  opts.on('-p', '--separate [SEPARATOR]', 'Separate phrase blocks by SEPARATOR', '[Default: empty line]') { |p|
    options[:separate] = p || ''
  }

  opts.on('-l', '--lingo', 'Output results in lingo dictionary format') {
    options[:lingo] = true
  }

  opts.on('-F', '--format FORMAT', 'Custom output format. Available placeholders:', '  %p = phrase', '  %P = phrase, CSV-ready', '  %t = target', '  %T = target, CSV-ready', '  %d = distance', '  %s = similarity') { |f|
    options[:format] = f
  }

  opts.separator ' '
  opts.separator '  * Checking pairs'
  opts.separator ' '

  opts.on('-C', '--check', 'Check pairs in input file (CSV) against', 'specified (or global) threshold') {
    options[:check] = true
  }

  opts.on('-f', '--failed', 'Print only failed checks') {
    options[:failed_only] = true
  }

  opts.on('-a', '--align', 'Align check results') {
    options[:align] = true
  }

  opts.on('-A', '--adjust-coeff', 'Adjust coefficient to minimize the error') {
    options[:adjust_coeff] = true
  }

  opts.separator ' '
  opts.separator 'Generic options:'

  opts.on('-h', '--help', 'Print this help message and exit') {
    abort opts.to_s
  }

  opts.on('--version', 'Print program version and exit') {
    abort "#{File.basename($0)} v#{PerseusMatch::VERSION}"
  }
}.parse!

unless file = ARGV.shift
  abort "No input file specified.\n#{USAGE}"
else
  abort "Input file not found: #{file}" unless File.readable?(file)
end

unknowns = Set.new if options[:unknowns]

PerseusMatch.tokenize(file, unknowns || !options[:silent])

if unknowns
  File.open(options[:unknowns], 'w') { |f|
    unknowns.sort.each { |unk| f.puts "#{unk}=#{unk} #?" }
  }

  unknowns = nil
end

skip_re = %r{\A\s*(?:#|\z)}o
phrases = []

File.open(file) { |f|
  f.each { |line| phrases << line.chomp unless line =~ skip_re }
}

pm_options = options[:config] ? YAML.load_file(options[:config]) : {}
pm_options[:verbose] = options[:verbose] if options.has_key?(:verbose)
list_options = { :minimal => options[:minimal] }

threshold, count, count_all = options[:threshold], 0, 0

action = if options[:check]
  require 'csv'

  if CSV.const_defined?(:Reader)
    require 'fastercsv'
    CSV = FasterCSV
  end

  format = if options[:align]
    require 'jcode'

    width = phrases.max(:jlength) + 3

    lambda { |line, res|
      "#{line} #{'.' * (width - line.jlength)} [#{res}]"
    }
  else
    lambda { |line, res|
      "#{line} [#{res}]"
    }
  end

  phrases.sort! if options[:sort]

  global_threshold = options[:threshold]
  failed_only      = options[:failed_only]
  collect_stats    = options[:stats]
  adjust_coeff     = options[:adjust_coeff]

  _action = lambda { |*args|
    pm_options[:default_coeff] = args.first unless args.empty?

    count, count_all = 0, 0
    positives = negatives = false_positives = false_negatives = 0.0

    phrases.each { |line|
      phrase, target, threshold, operator, _ = *CSV.parse_line(line)

      threshold ||= global_threshold
      operator  ||= '>'
      assign      = operator =~ />/ || operator == '=='

      begin
        PerseusMatch.check!(phrase, target, threshold.to_f, operator, pm_options)

        count += 1
        assign ? positives += 1 : negatives += 1

        puts format[line, 'OK'] unless adjust_coeff || failed_only
      rescue PerseusMatch::CheckFailedError => err
        assign ? false_negatives += 1 : false_positives += 1

        puts format[line, "FAILED -- #{err.value}"] unless adjust_coeff
      end

      count_all += 1
    }

    divide = lambda { |numerator, denominator|
      denominator == 0 ? 0 : numerator / denominator
    }

    if collect_stats || adjust_coeff
      error = divide[
        false_positives + false_negatives,
        positives + negatives + false_positives + false_negatives
      ]
    end

    if collect_stats
      recall    = divide[positives, positives + false_negatives]
      precision = divide[positives, positives + false_positives]
      f1        = divide[2 * recall * precision, recall + precision]

      stats = 'R = %0.2f%%, P = %0.2f%%, F1 = %0.4f, Err = %0.4f' % [
        recall * 100, precision * 100, f1, error
      ]

      stats << " (Coeff = #{pm_options[:default_coeff]})" if adjust_coeff

      warn stats
    end

    error if adjust_coeff
  }

  if adjust_coeff
    lambda {
      step, max = 1, 100

      start_coeff = pm_options[:default_coeff] || PerseusMatch::DEFAULT_COEFF
      start_err   = _action[start_coeff]

      previous_coeff = next_coeff = start_coeff
      previous_err   = next_err   = start_err

      max.times { break if (previous_err = _action[previous_coeff -= step]) != start_err }
      max.times { break if (next_err     = _action[next_coeff     += step]) != start_err }

      best_err = [start_err, previous_err, next_err].min

      if best_err == start_err
        best_coeff = start_coeff
      else
        if best_err == previous_err
          step *= -1
          best_coeff = previous_coeff
        else
          best_coeff = next_coeff
        end

        max.times {
          break if (current_err = _action[current_coeff = best_coeff + step]) > best_err
          best_err, best_coeff = current_err, current_coeff
        }
      end

      puts 'Coeff = %d (%d), Err = %0.4f (%0.4f)' % [best_coeff, start_coeff, best_err, start_err]
    }
  else
    _action
  end
else
  format = if _format = options[:format]
    substitutions = {
      'p' => ['#{pm.phrase}',                     's'],
      'P' => ['"#{pm.phrase.gsub(/"/, %q{""})}"', 's'],
      't' => ['#{pm.target}',                     's'],
      'T' => ['"#{pm.target.gsub(/"/, %q{""})}"', 's'],
      'd' => ['#{pm.distance}',                   'd'],
      's' => ['#{pm.similarity}',                 'f']
    }

    lambda { |pm|
      _format.gsub(/(%-?[.\d]*)([pPtTds])/) {
        value, field = substitutions[$2]
        "#{$1}#{field}" % value.evaluate(binding)
      }
    }
  else
    if options[:lingo]
      if options[:minimal]
        lambda { |pm| ["#{pm.phrase}*#{pm.target}", "#{pm.target}*#{pm.phrase}"] }
      else
        lambda { |pm| "#{pm.phrase}*#{pm.target}" }
      end
    else
      if options[:sort]
        lambda { |pm| "  #{[pm.target, pm.distance, pm.similarity].inspect}" }
      else
        lambda { |pm| [pm.phrase, pm.target, pm.distance, pm.similarity].inspect }
      end
    end
  end

  if options[:sort]
    lambda {
      PerseusMatch::Cluster.new(phrases, pm_options, list_options).sort { |pm|
        count_all += 1

        if pm.similarity >= threshold
          count += 1
          format[pm]
        end
      }.each { |phrase, matches|
        puts "#{phrase.inspect}:", matches.compact
      }
    }
  else
    lambda {
      separator, previous_phrase = options[:separate], nil

      PerseusMatch::List.pair(phrases, pm_options, list_options) { |pm|
        count_all += 1

        if pm.similarity >= threshold
          count += 1

          if separator && pm.phrase != previous_phrase ||= pm.phrase
            puts separator
            previous_phrase = pm.phrase
          end

          puts format[pm]
        end
      }
    }
  end
end

if options[:stats]
  time = Benchmark.realtime(&action)

  hms, x, y = time.to_hms(2), time / count, time / count_all

  precision = lambda { |i| i.to_s.sub(/\./, '')[/\A0*/].length + 2 }

  warn "%d (%d/%d): %s => %0.#{precision[x]}fs/%0.#{precision[y]}fs" % [
    phrases.size, count, count_all, hms, x, y
  ]
else
  action.call
end
